#!/bin/bash
# kak remote control, reimplementation of alexherbo2's connect.kak

function -ensure-env {
    # Exit program if $session is not set.
    if [[ -z $session ]]; then
        echo "$0 $1:" 'No kak $session' >&2
        exit
    fi
}

function send {
    # Evaluate kak script in $session. Run in $client if set.
    -ensure-env
    d=$(mktemp --suffix=-krc-send)
    echo "$@" > "$d"
    if [[ -n $client ]]; then
        echo "eval -try-client $client %{ source $d; nop %sh{ rm $d } }" | kak -p "$session"
    else
        echo "source $d; nop %sh{ rm $d }" | kak -p "$session"
    fi
}

function get {
    # Print the result of echo arguments in kak $session on stdout. Run in $client if set.
    -ensure-env
    d=$(mktemp -d --suffix=-krc-get)
    fifo="$d/fifo"
    mkfifo "$fifo"
    trap "rm -rf $d" EXIT
    krc send echo -to-file "$fifo" "$@"
    cat "$fifo"
}

function attach {
    # Start a new kak client in $session.
    -ensure-env
    kak -c "$session" "$@"
}

function attach-with {
    # Start a new kak client in $session, evaluating the argument kak script at startup.
    -ensure-env
    d=$(mktemp --suffix=-kak-attach-with)
    echo "$@" > "$d"
    kak -c "$session" -e "source $d; nop %sh{ rm $d }"
}

function buffers {
    # List the buffers in $session.
    eval "set -- $(krc get %val[buflist])"
    for buf; do
        echo "$buf"
    done
}

function init {
    # Run in bash with `source krc init` to set $session and $client.
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    export PATH=$DIR:$PATH

    if [[ -z $session ]]; then
        session=$(kak -l | grep -v dead | tail -n 1)
    fi
    export session

    if [[ -n $session && -z $client ]]; then
        clients=$(krc get %val[client_list])
        client=$(echo $clients | cut '-d ' -f 1)
    fi
    export client

    export NNN_OPENER='krc :edit'
    export OPENER='krc :edit'
    export EDITOR='krc edit'
    export VISUAL='krc edit'
    export PAGER='krc edit'
}

function kakscript {
    # Run in kak with `eval %sh{ krc kakscript }` to define :connect.
    self=$(realpath $0)
    echo '
        def connect -override -params 1.. %{
            %arg{1} bash -c %{
                export session=$1
                export client=$2
                source $3 init
                cd $4
                shift 5
                [ "$1" ] && "$@" || "$SHELL"
            } -- %val{session} %val{client} '"$self"' %sh{pwd} %arg{@}
        }

        def shell -params 1.. -override %{
            nop %sh{
                setsid "$@" < /dev/null > /dev/null 2>&1 &
            }
        }

        def connect-shell -params 1.. -override %{
            connect shell %arg{@}
        }

        def connect-terminal -params .. -override %{
            connect terminal %arg{@}
        }
    '
}

function env {
    # Print the current $session and $client to stdout.
    echo session: "$session"
    echo client: "$client"
}

function edit {
    # Edit the argument file in $session in a new client.
    krc attach-with edit "$@"
}

function :edit {
    # Edit the argument file in $client and focus it.
    krc send edit "$@" ';' focus
}

function man {
    # Open the argument man page in $session in a new client.
    krc attach-with man "$@"
}

function :man {
    # Open the argument man page in $client and focus it.
    krc send man "$@" ';' focus
}

if [[ $(type -t $1) == 'function' ]]; then
    f=$1
    shift
    "$f" "$@"
else
    printf 'kakoune-remote-control (krc)\n'

    printf 'Usage:\n    %s COMMAND [...ARGS]\n' "$0"
    printf '\n'
    printf 'Where COMMAND is one of:\n'

    self=$(realpath $0)
    functions=$(grep -Po '^function \K[:\w][\w-]+' "$self")
    for fn in $functions; do
        paste <(printf '  %-12s' "$fn") <(
            cat "$self" |
            sed -n "/^function $fn /,/^}/p" | sed -n 's/^\s\+\#\s\+//p' |
            fmt -w $(($(tput cols) - 15))
        ) | column -s $'\t' -t
    done
fi

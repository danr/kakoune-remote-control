#!/usr/bin/env bash
# kak remote control, reimplementation of alexherbo2's connect.kak

kak-escape() {
    # From https://github.com/alexherbo2/prelude.kak/blob/master/rc/prelude.sh
    # Original implementation by Screwtape https://github.com/mawww/kakoune/issues/3340
    for text do
        printf "'"
        while true; do
            case "$text" in
                *"'"*)
                    head=${text%%"'"*}
                    tail=${text#*"'"}
                    printf "%s''" "$head"
                    text=$tail
                    ;;
                *)
                    printf "%s' " "$text"
                    break
                    ;;
            esac
        done
    done
    printf "\n"
}

ensure-env() {
    # Exit program if $session is not set.
    if test "$session" = ''; then
        echo 'kak $session not set' >&2
        exit
    fi
}

function kak-defs {
    # Run in kak with `eval %sh{ krc kak-defs }` to define :connect.
    echo '
        def connect -override -params 1.. %{
            %arg{1} bash -c %{
                export session=$1
                export client=$2
                cd $3
                shift 4
                [ "$1" ] && "$@" || "$SHELL"
            } -- %val{session} %val{client} %sh{pwd} %arg{@}
        }

        def shell -params 1.. -override %{
            nop %sh{
                setsid "$@" < /dev/null > /dev/null 2>&1 &
            }
        }

        def connect-shell -params 1.. -override %{
            connect shell %arg{@}
        }

        def connect-terminal -params .. -override %{
            connect terminal %arg{@}
        }
    '
}

function env {
    # Print the current $session and $client to stdout.
    echo session: "$session"
    echo client: "$client"
}

function raw-send {
    # Evaluate kak script from stdin in $session. Run in $client if set.
    ensure-env
    script=$(mktemp --suffix=-krc-raw-send)
    cat > "$script"
    eval_flags=""
    if [[ -n $client ]]; then
        eval_flags="-try-client $client"
    fi
    echo "
        try %{eval $eval_flags %sh{cat $script; rm $script}} catch %{
            echo -debug krc: %val{error}
            eval $eval_flags %{echo -markup {Error}krc: %val{error}}
        }
    " | kak -p "$session"
}

function raw-send-sync {
    # Evaluate kak script from stdin in $session, waiting for completion. Run in $client if set. Any errors are written on stderr.
    d=$(mktemp -d --suffix=-krc-raw-send-sync)
    trap "rm -rf $d" EXIT
    script="$d/script"
    cat > "$script"
    err="$d/err"
    touch "$err"
    fifo="$d/fifo"
    mkfifo "$fifo"
    echo -e "
        try %{eval %sh{cat $script}
            echo -to-file $fifo done
        } catch %{
            echo -to-file $err %val{error} '\n'
            echo -to-file $fifo done
            fail %val{error}
        }
    " | raw-send
    cat "$fifo" >/dev/null
    cat "$err" >&2
}

function send {
    # Run one kak command in $session, in $client if set.
    kak-escape "$@" | raw-send
}

function send-fg {
    # Focus the $client and run one kak command in $session.
    { echo focus; kak-escape "$@"; } | raw-send
}

function send-sync {
    # Run one kak command in $session (in $client if set) and wait for the result.
    kak-escape "$@" | raw-send-sync
}

function get {
    # Print the echo of arguments in kak $session on stdout. Run in $client if set.
    out=$(mktemp --suffix=-krc-get)
    trap "rm -rf $out" EXIT
    touch "$out"
    echo echo -to-file "$out" "$@" | raw-send-sync
    cat "$out"
}

function attach {
    # Start a new kak client in $session.
    ensure-env
    kak -c "$session" "$@"
}

function attach-with {
    # Start a new kak client in $session, running the argument kak command at startup.
    ensure-env
    script=$(mktemp --suffix=-krc-attach-with)
    kak-escape "$@" > "$script"
    kak -c "$session" -e "eval %sh{cat $script; rm $script}"
}

if [[ $(type -t -- "$1") == 'function' ]]; then
    "$@"
else
    printf '%s\n' "kakoune-remote-control (krc)"
    printf '%s\n' ""
    printf '%s\n' "Usage:"
    printf '%s\n' "    $(basename "$0") COMMAND [...ARGS]"
    printf '%s\n' ""
    printf '%s\n' "Where COMMAND is one of:"

    self=$(realpath "$0")
    functions=$(grep -Po '^function \K[\w-]+' "$self")
    if [[ -z "$cols" ]]; then
        cols=$(tput cols)
    fi
    for fn in $functions; do
        paste <(printf '  %-13s' "$fn") <(
            cat "$self" |
            sed -n "/^function $fn /,/^}/p" | sed -n 's/^\s\+\#\s\+//p' |
            fmt -w $((cols - 16))
        ) | column -s $'\t' -t
    done
fi
